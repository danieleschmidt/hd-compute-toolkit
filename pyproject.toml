[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "hd-compute-toolkit"
version = "0.1.0"
description = "High-performance hyperdimensional computing library for PyTorch and JAX"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Daniel Schmidt", email = "daniel@example.com"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.21.0",
    "torch>=1.12.0",
    "jax>=0.3.0",
    "jaxlib>=0.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-benchmark>=4.0.0",
    "pytest-mock>=3.10.0",
    "hypothesis>=6.0.0",
    "black>=22.0.0",
    "isort>=5.0.0",
    "flake8>=4.0.0",
    "flake8-docstrings>=1.6.0",
    "flake8-bugbear>=22.0.0",
    "mypy>=0.991",
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "pre-commit>=2.20.0",
    "mutmut>=2.4.0",
    "coverage[toml]>=7.0.0",
    "ruff>=0.1.0",
    "interrogate>=1.5.0",
]
fpga = [
    "pynq>=2.7.0",
]
vulkan = [
    "vulkan>=1.3.0",
    "compute-shader>=0.1.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]

[project.scripts]
hdc-benchmark = "hd_compute.cli:benchmark"
hdc-validate = "hd_compute.cli:validate"

[project.urls]
Homepage = "https://github.com/danieleschmidt/hd-compute-toolkit"
Repository = "https://github.com/danieleschmidt/hd-compute-toolkit"
Documentation = "https://hd-compute-toolkit.readthedocs.io"
"Bug Reports" = "https://github.com/danieleschmidt/hd-compute-toolkit/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["hd_compute*"]

[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311"]

[tool.isort]
profile = "black"
multi_line_output = 3

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=hd_compute",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-fail-under=90",
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "performance: Performance benchmarks",
    "gpu: Tests requiring GPU",
    "fpga: Tests requiring FPGA hardware",
    "slow: Slow running tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["hd_compute"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "setup.py",
    "docs/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "ICN", # flake8-import-conventions
    "S",   # bandit
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "S101",  # use of assert detected
    "S311",  # standard pseudo-random generators are not suitable for cryptographic purposes
]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["S101", "ARG", "S311"]
"examples/**/*" = ["S101", "ARG"]

[tool.bandit]
exclude_dirs = ["tests", "examples"]
skips = ["B101", "B311"]

[tool.interrogate]
ignore-init-method = true
ignore-init-module = false
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = false
ignore-nested-functions = false
ignore-nested-classes = true
ignore-setters = false
fail-under = 80
exclude = ["setup.py", "docs", "build"]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
verbose = 0
quiet = false
whitelist-regex = []
color = true

[tool.mutmut]
paths_to_mutate = "hd_compute/"
backup = false
runner = "python -m pytest"
tests_dir = "tests/"