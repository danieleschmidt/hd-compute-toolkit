# Automated Dependency Updates
# This workflow automatically updates dependencies and creates PRs

name: Update Dependencies

on:
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  PYTHON_VERSION: '3.11'

jobs:
  update-dependencies:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools bump2version

      - name: Update pip-tools
        run: |
          pip-compile --upgrade pyproject.toml
          pip-compile --upgrade requirements-dev.in

      - name: Check for dependency updates
        id: check-updates
        run: |
          if git diff --quiet pyproject.toml requirements-dev.txt; then
            echo "No dependency updates available"
            echo "has_updates=false" >> $GITHUB_OUTPUT
          else
            echo "Dependencies have updates"
            echo "has_updates=true" >> $GITHUB_OUTPUT
          fi

      - name: Install updated dependencies
        if: steps.check-updates.outputs.has_updates == 'true'
        run: |
          pip install -e ".[dev]"

      - name: Run test suite
        if: steps.check-updates.outputs.has_updates == 'true'
        run: |
          python -m pytest tests/ -x --tb=short
          
      - name: Run security checks
        if: steps.check-updates.outputs.has_updates == 'true'
        run: |
          pip install safety bandit
          safety check
          bandit -r hd_compute/ -f json

      - name: Generate update summary
        if: steps.check-updates.outputs.has_updates == 'true'
        id: summary
        run: |
          echo "## Dependency Updates" > update_summary.md
          echo "" >> update_summary.md
          echo "### Updated Packages" >> update_summary.md
          git diff --name-only | while read file; do
            echo "- $file" >> update_summary.md
          done
          echo "" >> update_summary.md
          echo "### Security Scan Results" >> update_summary.md
          echo "âœ… Safety check passed" >> update_summary.md
          echo "âœ… Bandit security scan passed" >> update_summary.md
          echo "âœ… All tests passed" >> update_summary.md

      - name: Create Pull Request
        if: steps.check-updates.outputs.has_updates == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            deps: update dependencies (automated)
            
            - Updated Python dependencies to latest versions
            - All tests pass
            - Security scans clean
            
            ðŸ¤– Generated with [Claude Code](https://claude.ai/code)
          title: "ðŸ”„ Automated Dependency Updates"
          body-path: update_summary.md
          branch: dependency-updates/automated
          delete-branch: true
          labels: |
            dependencies
            automated
            maintenance
          assignees: ${{ github.repository_owner }}
          reviewers: ${{ github.repository_owner }}

  update-github-actions:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update GitHub Actions
        uses: renovatebot/github-action@v39.2.3
        with:
          configurationFile: .github/renovate.json
          token: ${{ secrets.GITHUB_TOKEN }}

  security-audit:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run pip-audit
        run: |
          pip install pip-audit
          pip-audit --format=json --output=audit-report.json

      - name: Upload audit report
        uses: actions/upload-artifact@v3
        with:
          name: security-audit-report
          path: audit-report.json

      - name: Create security issue
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Security vulnerabilities detected in dependencies',
              body: 'Automated security audit detected vulnerabilities. Please review the audit report.',
              labels: ['security', 'dependencies', 'urgent']
            })