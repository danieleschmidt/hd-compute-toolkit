# Terragon Autonomous SDLC Value Discovery Configuration
# This configuration defines the scoring weights, thresholds, and discovery sources
# for the autonomous value discovery and prioritization system

# Repository maturity level (auto-detected: DEVELOPING)
maturity_level: "developing"
maturity_score: 45  # 0-100 scale

# Adaptive scoring weights based on maturity level
scoring:
  weights:
    # Weights are automatically adjusted based on repository maturity
    nascent:
      wsjf: 0.4        # Weighted Shortest Job First
      ice: 0.3         # Impact, Confidence, Ease
      technicalDebt: 0.2
      security: 0.1
    
    developing:        # Current configuration
      wsjf: 0.5
      ice: 0.2
      technicalDebt: 0.2
      security: 0.1
    
    maturing:
      wsjf: 0.6
      ice: 0.1
      technicalDebt: 0.2
      security: 0.1
    
    advanced:
      wsjf: 0.5
      ice: 0.1
      technicalDebt: 0.3
      security: 0.1
  
  # Scoring thresholds and multipliers
  thresholds:
    minScore: 10              # Minimum composite score to consider
    maxRisk: 0.8             # Maximum acceptable risk (0-1 scale)
    securityBoost: 2.0       # Multiplier for security-related items
    complianceBoost: 1.8     # Multiplier for compliance items
    hotspotMultiplier: 5.0   # Max multiplier for code hotspots
  
  # Quality gates and constraints
  constraints:
    maxConcurrentTasks: 1    # Only one autonomous task at a time
    requiresTestsCoverage: 80 # Minimum test coverage requirement
    codeQualityGate: true    # Require linting/type checking to pass

# Value discovery sources and their configurations
discovery:
  sources:
    # Static analysis of codebase
    staticAnalysis:
      enabled: true
      tools:
        - "flake8"           # Python linting
        - "mypy"             # Type checking
        - "bandit"           # Security analysis
        - "radon"            # Complexity analysis
      patterns:
        - "TODO"             # Extract TODO comments
        - "FIXME"            # Extract FIXME comments
        - "DEPRECATED"       # Find deprecated code
        - "hack"             # Find temporary solutions
        - "quick fix"        # Find quick fixes
    
    # Git history analysis
    gitHistory:
      enabled: true
      analyzePeriod: 90      # Days to analyze
      patterns:
        - "temporary"
        - "quick fix"
        - "hack"
        - "workaround"
      churnAnalysis: true    # Analyze file churn vs complexity
    
    # Security vulnerability scanning
    security:
      enabled: true
      sources:
        - "dependabot"       # GitHub Dependabot alerts
        - "snyk"             # Snyk vulnerability database
        - "osv"              # OSV database
        - "nvd"              # National Vulnerability Database
      autoUpgradeMinor: true # Auto-upgrade minor versions
    
    # Issue tracking integration
    issueTrackers:
      enabled: false         # Would require GitHub API access
      sources:
        - "github_issues"
        - "github_prs" 
      labels:
        highPriority: ["critical", "high-priority", "urgent"]
        technicalDebt: ["technical-debt", "refactor", "cleanup"]
    
    # Performance monitoring (placeholder)
    performance:
      enabled: false         # Would require monitoring system
      sources:
        - "benchmark_results"
        - "performance_tests"
        - "memory_profiling"

# Execution configuration
execution:
  # Task selection algorithm
  selection:
    algorithm: "weighted_composite"  # weighted_composite, wsjf_only, ice_only
    riskTolerance: "medium"         # low, medium, high
    preferenceOrder:
      - "security"                  # Security fixes first
      - "critical_bugs"             # Critical bugs second
      - "technical_debt"            # Technical debt third
      - "features"                  # New features last
  
  # Validation requirements
  validation:
    runTests: true                  # Always run tests before committing
    runLinting: true                # Always run linting
    runSecurityScans: true          # Run security scans
    requireReview: false            # Autonomous execution enabled
  
  # Rollback conditions
  rollback:
    triggers:
      - "test_failure"
      - "build_failure"
      - "security_violation"
      - "performance_regression"
    automaticRollback: true
  
  # Branch and PR settings
  branching:
    prefix: "auto-value"            # Branch prefix for autonomous work
    prLabels:
      - "autonomous"
      - "value-driven"
    assignReviewers: true           # Assign based on CODEOWNERS
    autoMerge: false                # Require human approval

# Learning and adaptation settings
learning:
  enabled: true
  
  # Feedback collection
  feedback:
    trackEstimationAccuracy: true   # Compare estimated vs actual effort
    trackValueDelivery: true        # Measure actual business value
    adaptWeights: true              # Automatically adjust scoring weights
    learningRate: 0.1               # How quickly to adapt (0-1)
  
  # Model updates
  modelUpdates:
    frequency: "weekly"             # How often to retrain models
    minSamples: 10                  # Minimum completed tasks before learning
    confidenceThreshold: 0.7        # Minimum confidence for predictions
  
  # Historical data retention
  retention:
    maxHistoryDays: 365             # Keep metrics for 1 year
    aggregateOldData: true          # Aggregate old data for trends

# Monitoring and alerting
monitoring:
  enabled: true
  
  # Metrics to track
  metrics:
    - "tasks_completed_per_week"
    - "average_cycle_time"
    - "estimation_accuracy"
    - "value_delivered_score"
    - "technical_debt_reduction"
    - "security_improvements"
  
  # Alerting thresholds
  alerts:
    lowVelocity: 2                  # Alert if < 2 tasks/week
    highFailureRate: 0.3            # Alert if > 30% failure rate
    estimationDrift: 0.5            # Alert if estimation accuracy < 50%
  
  # Reporting
  reporting:
    generateWeeklyReport: true
    generateMonthlyTrends: true
    exportMetrics: true

# Integration settings
integrations:
  # Version control
  git:
    defaultBranch: "main"
    protectedBranches: ["main", "develop"]
    requireSignedCommits: false
  
  # External tools
  tools:
    codeQuality:
      sonarqube: false              # SonarQube integration
      codeclimate: false            # Code Climate integration
    
    security:
      snyk: false                   # Snyk integration
      dependabot: true              # GitHub Dependabot
    
    monitoring:
      datadog: false                # Datadog integration
      newrelic: false               # New Relic integration

# Debug and development settings
debug:
  enabled: false
  logLevel: "INFO"                  # DEBUG, INFO, WARNING, ERROR
  dryRun: false                     # Set to true to simulate without changes
  verboseLogging: false             # Detailed operation logs